{"version":3,"sources":["services/GitHubUser.js","components/SearchUser.js","components/UserRepos.js","components/UserInfo.js","components/GitHub.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","GitHubUser","getByUsername","username","axios","get","concat","getReposByUsername","SearchUser","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","bind","assertThisInitialized","e","_this2","preventDefault","refs","value","then","response","updateUser","data","updateRepos","react_default","a","createElement","className","href","onSubmit","type","ref","placeholder","React","Component","UserRepos","state","reposCount","setState","repos","length","reposList","map","repo","key","name","stargazers_count","description","html_url","role","open_issues","UserInfo","_ref","user","src","avatar_url","alt","width","height","login","followers","following","components_UserRepos","GitHub","components_SearchUser","components_UserInfo","App","components_GitHub","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gQAEMA,EAAU,+BAYDC,EAVI,CACjBC,cADiB,SACHC,GACZ,OAAOC,IAAMC,IAAN,GAAAC,OAAaN,EAAb,KAAAM,OAAwBH,KAGjCI,mBALiB,SAKEJ,GACjB,OAAOC,IAAMC,IAAN,GAAAC,OAAaN,EAAb,KAAAM,OAAwBH,EAAxB,aC+CIK,cArDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IAFHA,4EAKNU,GAAG,IAAAC,EAAAR,KACdO,EAAEE,iBAEFrB,EAAWC,cAAcW,KAAKU,KAAKpB,SAASqB,OAC3CC,KAAK,SAACC,GACLL,EAAKZ,MAAMkB,WAAWD,EAASE,QAGjC3B,EAAWM,mBAAmBM,KAAKU,KAAKpB,SAASqB,OAChDC,KAAK,SAACC,GACLL,EAAKZ,MAAMoB,YAAYH,EAASE,yCAKlC,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,wBAEEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,kCAAiCJ,EAAAC,EAAAC,cAAA,yCAE3CF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMG,SAAUtB,KAAKI,cACnBa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLC,IAAI,WACJJ,UAAU,eACVK,YAAY,mBAGhBR,EAAAC,EAAAC,cAAA,UACEI,KAAK,SACLH,UAAU,mBAFZ,oBAtCaM,IAAMC,WCuChBC,cAvCb,SAAAA,EAAYhC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4B,IACjB/B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8B,GAAAzB,KAAAH,KAAMJ,KACDiC,MAAQ,CACXC,WAAY,GAHGjC,yFAOOD,GACxBI,KAAK+B,SAAS,CAACD,WAAYlC,EAAMoC,MAAMC,0CAGhC,IAEDC,EADYlC,KAAKJ,MAAfoC,MACgBG,IAAI,SAACC,EAAMC,GACjC,OACEpB,EAAAC,EAAAC,cAAA,OAAKkB,IAAKA,EAAKjB,UAAU,aACvBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAKiB,EAAKE,KACRrB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAASgB,EAAKG,iBAA9B,WAEFtB,EAAAC,EAAAC,cAAA,SAAIiB,EAAKI,aACTvB,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAMe,EAAKK,SAAUrB,UAAU,kBAAkBsB,KAAK,UAAzD,cACAzB,EAAAC,EAAAC,cAAA,KAAGE,KAAMe,EAAKK,SAAW,UAAWrB,UAAU,kBAAkBsB,KAAK,UAArE,WAAuFN,EAAKO,YAA5F,WAOV,OACE1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKnB,KAAK6B,MAAMC,WAAhB,iBACCI,UAlCeR,IAAMC,WC2BfiB,EAzBE,SAAAC,GAAqB,IAAlBC,EAAkBD,EAAlBC,KAAMd,EAAYa,EAAZb,MAiBtB,OAhBac,EAEX7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAa2B,IAAKD,EAAKE,WAAYC,IAAI,SAASC,MAAM,MAAMC,OAAO,QAClFlC,EAAAC,EAAAC,cAAA,UAAK2B,EAAKM,OACVnC,EAAAC,EAAAC,cAAA,SAAI2B,EAAKR,MACTrB,EAAAC,EAAAC,cAAA,uBAAe2B,EAAKO,UAApB,iBAA6CP,EAAKQ,WAClDrC,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBC,KAAMyB,EAAKL,SAAUC,KAAK,UAAzD,kBAELzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACoC,EAAD,CAAWvB,MAAOA,MAGpB,MCoBOwB,cAlCb,SAAAA,EAAY5D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwD,IACjB3D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0D,GAAArD,KAAAH,KAAMJ,KACDiC,MAAQ,CACXiB,KAAM,KACNd,MAAO,IAETnC,EAAKiB,WAAajB,EAAKiB,WAAWT,KAAhBP,OAAAQ,EAAA,EAAAR,CAAAD,IAClBA,EAAKmB,YAAcnB,EAAKmB,YAAYX,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IAPFA,0EAURiD,GACT9C,KAAK+B,SAAS,CAACe,KAAMA,wCAGXd,GACVhC,KAAK+B,SAAS,CAACC,MAAOA,qCAItB,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACsC,EAAD,CACE3C,WAAYd,KAAKc,WACjBE,YAAahB,KAAKgB,cAEpBC,EAAAC,EAAAC,cAACuC,EAAD,CACEZ,KAAM9C,KAAK6B,MAAMiB,KACjBd,MAAOhC,KAAK6B,MAAMG,gBA5BPN,IAAMC,WCCZgC,EAFH,kBAAM1C,EAAAC,EAAAC,cAACyC,EAAD,OCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7D,KAAK,SAAA8D,GACjCA,EAAaC","file":"static/js/main.37802345.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = \"https://api.github.com/users\"\n\nconst GitHubUser = {\n  getByUsername(username) {\n    return axios.get(`${baseUrl}/${username}`);\n  },\n\n  getReposByUsername(username) {\n    return axios.get(`${baseUrl}/${username}/repos`);\n  }\n};\n\nexport default GitHubUser;","import React from 'react';\nimport GitHubUser from '../services/GitHubUser';\n\nclass SearchUser extends React.Component{\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    GitHubUser.getByUsername(this.refs.username.value)\n    .then((response) => {\n      this.props.updateUser(response.data);\n    });\n\n    GitHubUser.getReposByUsername(this.refs.username.value)\n    .then((response) => {\n      this.props.updateRepos(response.data);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"jumbotron\">\n        <h1>\n          GitHub Info \n          <a href=\"https://jscasts.teachable.com/\"><small> JSCast | Matheus Lima</small></a>\n        </h1>\n        <div className=\"row\">\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"form-group\">\n              <label>Nome de Usu√°rio</label>\n              <input\n                type=\"text\"\n                ref=\"username\"\n                className=\"form-control\"\n                placeholder=\"Ex: matheusml\"\n                />\n            </div>\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\">Buscar\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\n// SearchUser.propTypes = {\n//   updateUser: React.PropTypes.func.isRequired,\n//   updateRepos: React.PropTypes.func.isRequired,\n// };\n\nexport default SearchUser;","import React from 'react';\n\nclass UserRepos extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      reposCount: 0,\n    }\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({reposCount: props.repos.length});\n  }\n\n  render() {\n    const { repos } = this.props;\n    const reposList = repos.map((repo, key) => {\n      return (\n        <div key={key} className=\"thumbnail\">\n          <div className=\"caption\">\n            <h3>{repo.name}\n              <span className=\"badge\">{repo.stargazers_count} STARS</span>\n            </h3>\n            <p>{repo.description}</p>\n            <p>\n              <a href={repo.html_url} className=\"btn btn-primary\" role=\"button\">Repository</a>\n              <a href={repo.html_url + '/issues'} className=\"btn btn-default\" role=\"button\">Issues ({repo.open_issues}) </a>\n            </p>\n          </div>\n        </div>\n      );\n    });\n\n    return (\n      <div>\n        <h2>{this.state.reposCount} repositories</h2>\n        {reposList}\n      </div>\n    );\n  }\n}\n\nexport default UserRepos;","import React from 'react';\n\nimport UserRepos from './UserRepos';\n\nconst UserInfo = ({ user, repos }) => {\n  var userInfo = user ?\n    (\n      <div className=\"row\">\n        <div className=\"col-lg-4\">\n          <img className=\"img-circle\" src={user.avatar_url} alt=\"avatar\" width=\"140\" height=\"140\" />\n          <h2>{user.login}</h2>\n          <p>{user.name}</p>\n          <p>Followers: {user.followers} / Following: {user.following}</p>\n          <p><a className=\"btn btn-default\" href={user.html_url} role=\"button\">View details</a></p>\n        </div>\n        <div className=\"col-lg-8\">\n          <UserRepos repos={repos} />\n        </div>\n      </div>\n    ) : null;\n\n    return userInfo;\n}\n\n// UserInfo.propTypes = {\n//   user: React.PropTypes.object,\n//   repos: React.PropTypes.array,\n// };\n\nexport default UserInfo;","import React from 'react';\nimport SearchUser from './SearchUser';\nimport UserInfo from './UserInfo';\n\nclass GitHub extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n      repos: [],\n    };\n    this.updateUser = this.updateUser.bind(this);\n    this.updateRepos = this.updateRepos.bind(this);\n  }\n\n  updateUser(user) {\n    this.setState({user: user});\n  }\n\n  updateRepos(repos) {\n    this.setState({repos: repos});\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <SearchUser\n          updateUser={this.updateUser}\n          updateRepos={this.updateRepos}\n        />\n        <UserInfo\n          user={this.state.user}\n          repos={this.state.repos}\n        />\n      </div>\n    );\n  }\n}\n\nexport default GitHub;\n","import React from 'react';\nimport GitHub from './components/GitHub'\n\nconst App = () => <GitHub />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}